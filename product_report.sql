-- =============================================
-- Product Performance Analysis Report
-- =============================================
-- Description: Creates a comprehensive product analysis view with performance
--              segmentation, pricing analysis, and revenue metrics
-- Business Value: Identifies high-performing products, optimizes inventory,
--                 and supports pricing strategies
-- Author: [Murali Jami]
-- Date: October 2025
-- =============================================

CREATE VIEW gold_product_report AS 

-- Step 1: Base Query - Join product and sales data
WITH base_query AS (
    SELECT 
        f.order_number, 
        f.customer_key, 
        f.product_key, 
        f.order_date,
        f.sales_amount,
        f.quantity,
        f.price, 
        p.product_name, 
        p.category, 
        p.subcategory, 
        p.cost
    FROM gold_fact_sales f 
    LEFT JOIN gold_dim_products p 
        ON p.product_key = f.product_key
    WHERE f.order_date IS NOT NULL
),

-- Step 2: Product Aggregation - Calculate key metrics per product

product_aggregation AS (
    SELECT 
        product_name, 
        category, 
        subcategory, 
        cost,
        -- Total number of orders containing this product
        COUNT(DISTINCT order_number) AS total_orders,
        -- Total revenue generated by product
        SUM(sales_amount) AS total_sales,
        -- Total units sold
        SUM(quantity) AS total_quantity,
        -- Number of unique customers who purchased
        COUNT(DISTINCT customer_key) AS total_customers,
        -- Most recent sale date
        MAX(order_date) AS last_order_date,
        -- Product lifespan in months (first to last sale)
        COALESCE(TIMESTAMPDIFF(MONTH, MIN(order_date), MAX(order_date)), 0) AS lifespan,
        -- Average selling price per unit
        ROUND(AVG(sales_amount / NULLIF(quantity, 0)), 1) AS avg_selling_price
    FROM base_query
    GROUP BY product_name, category, subcategory, cost
)

-- Step 3: Final Report - Add segmentation and calculated metrics

SELECT 
    product_name, 
    category, 
    subcategory, 
    cost,
    
    -- Product performance segmentation based on total sales
    -- High Performers: Products generating >$50,000
    -- Mid Range: Products generating $10,000-$50,000
    -- Low Performers: Products generating <$10,000
    CASE 
        WHEN total_sales > 50000 THEN "High Performers"
        WHEN total_sales <= 50000 AND total_sales > 10000 THEN "Mid Range"
        ELSE "Low Performers" 
    END AS product_segment,
    
    -- Recency: Months since last sale (identifies stale inventory)
    TIMESTAMPDIFF(MONTH, last_order_date, CURRENT_DATE()) AS recency,
    
    -- Average revenue per order for this product
    ROUND(total_sales / NULLIF(total_orders, 0)) AS avg_order_revenue,
    
    -- Average monthly revenue (product velocity)
    ROUND(total_sales / NULLIF(lifespan, 0)) AS avg_monthly_revenue,
    
    -- Core metrics
    total_orders,
    total_sales,
    total_quantity,
    total_customers,
    lifespan,
    avg_selling_price
FROM product_aggregation
ORDER BY total_sales DESC;

-- =============================================
-- Sample Usage:
-- SELECT * FROM gold_product_report WHERE product_segment = 'High Performers';
-- SELECT category, SUM(total_sales) FROM gold_product_report GROUP BY category;
-- SELECT * FROM gold_product_report WHERE recency > 12 ORDER BY total_sales DESC;
-- =============================================
